<?php
namespace app\common\controller;


use app\api\model\user\WxUser;
use app\BaseController;
use think\Exception;
use think\facade\Config;
use think\facade\Db;
use think\Validate;



class ApiBase extends BaseController
{

    // 用户ID
    protected $guid;
    // 登录信息
    protected $userInfo;

    //默认信息
    protected $default_bm ='' ;

    //默认信息
    protected $app;

    /**
     * 无需登录的方法,同时也就不需要鉴权了
     * @var array
     */
    protected $noNeedLogin = [];

    /**
     * 无需鉴权的方法,但需要登录
     * @var array
     */
    protected $noNeedRight = [];

    /**
     * 权限Auth
     * @var Auth
     */
    protected $auth = null;


    /**
     * 初始化
     * @author PENGKING
     * @since 2020/11/14
     */
    protected function initialize()
    {

        parent::initialize(); // TODO: Change the autogenerated stub
        //开启鉴权  true
        if(config('app')['api_authorization']){
            //检测是否需要验证登录
            //halt($this->noNeedLogin);
            if (!$this->match($this->noNeedLogin)) {
                //获取header里的
//                $authorization = request()->header("ApiAuthorization",'');
//                $guid = request()->header("guid",'');
//                $this->guid = $guid;
//                if(empty($guid)){
//                    base_msg('缺少用户guid',403);
//                }
//                if ($authorization && strpos($authorization, 'BearerApi') !== false) {
//                    $authorization = str_replace("BearerApi ", '', $authorization);
//                    $jwt = new \Jwt();
//                    if($guid !==$jwt->verifyToken($authorization)){
//                        base_msg('登录超时或者信息不匹配',402);
//                    }
//                } else {
//                    base_msg('请登录',401);
//                }
                $guid = request()->param('guid');
                if(empty($guid)){
                    base_msg('缺少用户guid',403);
                }
                $wxUser = new WxUser();
                $userInfo = $wxUser->getUserInfoByUid($guid);
                if(empty($userInfo)){
                    base_msg('用户信息不存在',403);
                }
                $this->userInfo = $wxUser->getUserInfoByUid($guid);
            }
        }

        // 初始化系统常量
        $this->initSystemConstant();

    }

    /**
     * 检测当前控制器和方法是否匹配传递的数组
     *
     * @param array $arr 需要验证权限的数组
     * @return boolean
     */
    public function match($arr = [])
    {
        $request = request();
        $arr = is_array($arr) ? $arr : explode(',', $arr);
        if (!$arr) {
            return false;
        }
        $arr = array_map('strtolower', $arr);
        // 是否存在
        if (in_array(strtolower($request->action()), $arr) || in_array('*', $arr)) {
            return true;
        }
        //return true;
        // 没找到匹配
        return false;
    }

    /**
     * 初始化系统常量
     *
     * @author PENGKING
     * @since 2020-04-21
     */
    public function initSystemConstant()
    {
        // 基础常量
        define('ROOT_PATH', app()->getRootPath());
        define('APP_PATH', ROOT_PATH . "app");
        define('ROUTE_PATH', ROOT_PATH . "route");
        define('RUNTIME_PATH', ROOT_PATH . "runtime");
        define('EXTEND_PATH', ROOT_PATH . "extend");
        define('VENDOR_PATH', ROOT_PATH . "vendor");
        define('PUBLIC_PATH', ROOT_PATH . 'public');

        // 附件常量
        // 文件上传路径
        $upload_parh = \think\facade\Filesystem::getDiskConfig(config('filesystem.default'), 'root');
        define('ATTACHMENT_PATH', $upload_parh);
        define('IMG_PATH', ATTACHMENT_PATH . "/images");
        define('UPLOAD_TEMP_PATH', ATTACHMENT_PATH . '/temp');

        // 系统域名
        define('SITE_URL', env('domain.site_url'));
        define('IMG_URL', env('domain.img_url'));
    }

    /**
     * 单表查询
     * @author PENGKING
     * @since 2020-04-21
     * @param string $db 数据表名称
     * @param array $where 查询条件
     * @param string $order  排序
     * @param string $field  显示字段
     * @param bool $is_sql  false
     */
    public  function  select_list($db='', $where=[], $order=["id" => "desc"], $field="*", $is_sql=false){
        //page为分页数据 过滤此字段
        $limit = empty($where['limit']) ? 10:$where['limit'];
        unset($where['page']);
        unset($where['limit']);
        try{
            $list = Db::name($db)
                ->where($where)
                ->where('mark',1)
                ->order($order)
                ->fetchSql($is_sql)
                ->field($field)
                ->filter(function($db) {
                    if(!empty($db['content'])){
                        $db['content'] = htmlspecialchars_decode($db['content']);
                    }
                    if(!empty($db['files'])){
                        $db['files']= json_decode($db['files'],true);
                    }
                    if(!empty($db['images'])){
                        $db['images'] = json_decode($db['images'],true);
                    }
                    if(!empty($db['start_time'])){
                        $db['start_time'] = date('Y/m/d H:i:s',$db['start_time']);
                    }
                    if(!empty($db['end_time'])){
                        $db['end_time'] = date('Y/m/d H:i:s',$db['end_time']);
                    }
                    if(!empty($db['uu_guid'])){
                        $db['uu_name'] = Db::name('tq_user')->where('guid',$db['uu_guid'])->value('name');
                        $db['uu_avatar'] =  Db::name('tq_user')->where('guid',$db['uu_guid'])->value('avatar');
                    }
                    if(!empty($db['create_time'])) {
                        $db['create_time'] = date('Y/m/d H:i:s', $db['create_time']);
                    }
                    if(!empty($db['update_time'])){
                        $db['update_time'] = date('Y/m/d H:i:s',$db['update_time']);
                    }
                    return $db;
                })
                ->paginate($limit);
        }catch (\Exception $e){
            base_msg($e->getMessage());
        }
        return $list;
    }

    /**
     * 关联查询
     * @author PENGKING
     * @since 2020-04-21
     * @param string $db 数据表名称
     * @param string $db1 数据表名称1
     * @param array $where 查询条件
     * @param array $onfield 关联字段
     * @param string $order  排序
     * @param string $field  显示字段
     * @param bool $is_sql  false
     */
    public  function  rel_select_list($db='', $where=[], $order=["id" => "desc"], $field="*",$is_sql=false,$onfield_id=""){
        //page为分页数据 过滤此字段
        $limit = empty($where['limit']) ? 10:$where['limit'];
        unset($where['page']);
        unset($where['limit']);
        try{
            $list = Db::name($db)
                ->where($where)
                ->where('mark',1)
                ->order($order)
                ->field($field)
                ->filter(function($db)  use ($onfield_id){
                    if(!empty($onfield_id)){
                        if (is_array($onfield_id)) {
                            foreach ($onfield_id as $vv){
                                if($vv !=="uu_guid"){
                                    $table =str_replace("_guid", "", $vv);
                                    $db[$table] = Db::name($table)->where('guid',$db[$vv])->where('mark',1)->find();
                                }
                            }
                        }else{
                            $table =str_replace("_guid", "", $onfield_id);
                            $db[$table] = Db::name($table)->where('guid',$db[$onfield_id])->where('mark',1)->find();
                        }
                    }
                    if(!empty($db['content'])){
                        $db['content'] = htmlspecialchars_decode($db['content']);
                    }
                    if(!empty($db['files'])){
                        $db['files']= json_decode($db['files'],true);
                    }
                    if(!empty($db['images'])){
                        $db['images'] = json_decode($db['images'],true);
                    }
                    if(!empty($db['start_time'])){
                        $db['start_time'] = date('Y/m/d H:i:s',$db['start_time']);
                    }
                    if(!empty($db['end_time'])){
                        $db['end_time'] = date('Y/m/d H:i:s',$db['end_time']);
                    }
                    if(!empty($db['uu_guid'])){
                        $db['uu_name']      = Db::name('tq_user')->where('guid',$db['uu_guid'])->value('name');
                        $db['uu_avatar']    =  Db::name('tq_user')->where('guid',$db['uu_guid'])->value('avatar');
                    }
                    if(!empty($db['create_time'])) {
                        $db['create_time'] = date('Y/m/d H:i:s', $db['create_time']);
                    }
                    if(!empty($db['update_time'])){
                        $db['update_time'] = date('Y/m/d H:i:s',$db['update_time']);
                    }
                    return $db;
                })

                ->paginate($limit);
        }catch (\Exception $e){
            base_msg($e->getMessage());
        }
        return $list;
    }

    /**
     * 关联查询
     * @author PENGKING
     * @since 2020-04-21
     * @param string $db 数据表名称
     * @param array $where 查询条件
     * @param string $field  显示字段
     * @param bool $is_sql  false
     * @param array $onfield_id  关联字段
     */
    public  function  rel_select_one($db='',$where=[],$field="*",$is_sql=false,$onfield_id=""){
        try{

            $info = Db::name($db)
                ->where($where)
                ->where('mark',1)
                ->fetchSql($is_sql)
                ->field($field)
                ->filter(function($db) use($onfield_id){
                    if(!empty($onfield_id)){
                        if (is_array($onfield_id)) {
                            foreach ($onfield_id as $vv){
                                $table = str_replace("_guid", "", $vv);
                                $db[$table] = Db::name($table)->where('guid',$db[$vv])->where('mark',1)->find();
                            }
                        }else{
                            $table = str_replace("_guid", "", $onfield_id);
                            $db[$table] = Db::name($table)->where('guid',$db[$onfield_id])->where('mark',1)->find();
                        }
                    }
                    if(!empty($db['create_time'])) {
                        $db['create_time'] = date('Y/m/d H:i:s', $db['create_time']);
                    }
                    if(!empty($db['update_time'])){
                        $db['update_time'] = date('Y/m/d H:i:s',$db['update_time']);
                    }
                    if(!empty($db['start_time'])){
                        $db['start_time'] = date('Y/m/d H:i:s',$db['start_time']);
                    }
                    if(!empty($db['end_time'])){
                        $db['end_time'] = date('Y/m/d H:i:s',$db['end_time']);
                    }
                    if(!empty($db['images'])){
                        $db['images'] = json_decode($db['images'],true);
                    }
                    if(!empty($db['files'])){
                        $db['files']= json_decode($db['files'],true);
                    }
                    if(!empty($db['content'])){
                        $db['content'] = htmlspecialchars_decode($db['content']);
                    }
                    if(!empty($db['uu_guid'])){
                        $db['uu_name']      = Db::name('tq_user')->where('guid',$db['uu_guid'])->value('name');
                        $db['uu_avatar']    =  Db::name('tq_user')->where('guid',$db['uu_guid'])->value('avatar');
                    }
                    return $db;
                })
                ->find();
        }catch (\Exception $e){
            base_msg($e->getMessage());
        }
        return $info;
    }
    /**
     * 查询
     * @author PENGKING
     * @since 2020-04-21
     * @param string $db 数据表名称
     * @param array $where 查询条件
     * @param string $field  显示字段
     * @param bool $is_sql  false
     */
    public  function  select_one($db='',$where=[],$field="*",$is_sql=false){
        try{
            $info = Db::name($db)
                ->where($where)
                ->where('mark',1)
                ->fetchSql($is_sql)
                ->field($field)
                ->filter(function($db) {
                    $db['create_time'] = date('Y/m/d H:i:s',$db['create_time']);
                    if(isset($info['update_time']) && $info['update_time']){
                        $db['update_time'] = date('Y/m/d H:i:s',$db['update_time']);
                    }
                    if(isset($info['start_time']) && $info['start_time']){
                        $db['start_time'] = date('Y/m/d H:i:s',$db['start_time']);
                    }
                    if(isset($info['end_time']) && $info['end_time']){
                        $db['end_time'] = date('Y/m/d H:i:s',$db['end_time']);
                    }
                    if(isset($info['images']) && $info['images']){
                        $db['images'] = json_decode($db['image'],true);
                    }
                    if(isset($info['files']) && $info['files']){
                        $db['files']= json_decode($db['files'],true);
                    }
                    if(isset($info['content']) && $info['content']){
                        $db['content'] = htmlspecialchars_decode($db['content']);
                    }
                    if(isset($info['uu_guid']) && $info['uu_guid']){
                        $db['uu_name']      = Db::name('tq_user')->where('guid',$db['uu_guid'])->value('name');
                        $db['uu_avatar']    =  Db::name('tq_user')->where('guid',$db['uu_guid'])->value('avatar');
                    }
                    return $db;
                })
                ->find();
        }catch (\Exception $e){
            base_msg($e->getMessage());
        }
        return $info;
    }

    /**
     * 写入数据
     * @author PENGKING
     * @since 2020-04-21
     * @param string $db 数据表名称
     * @param array $params 数据
     */
    public  function  api_ins($db='',$params=[],$is_sql=false)
    {
        try {
            $params['guid'] = get_guid_v4();
            $params['uu_guid'] = request()->header('guid');
            $params['create_time'] = time();
            if(!empty($params['files'])){
                $params['files'] =  json_encode($params['files']);
            }
            if(!empty($params['images'])){
                $params['images'] =  json_encode($params['images']);
            }
            $id = Db::name($db)->strict(false)->fetchSql($is_sql)->insertGetId($params);
        } catch (\Exception $e) {
            base_msg($e->getMessage());
        }
        return $id;
    }

    /**
     * 批量写入数据
     * @author PENGKING
     * @since 2020-04-21
     * @param string $db 数据表名称
     * @param array $params 数据
     */
    public  function  api_ins_all($db='',$params=[],$is_sql=false)
    {
        try {
            foreach ($params as &$vv){
                $vv['guid'] = get_guid_v4();
                $vv['uu_guid'] = request()->header('guid');
                $vv['create_time'] = time();
            }
            $id = Db::name($db)->strict(false)->fetchSql($is_sql)->insertAll($params);
        } catch (\Exception $e) {
            base_msg($e->getMessage());
        }
        return $id;
    }

    /**
     * 更新数据
     * @author PENGKING
     * @since 2020-04-21
     * @param string $db 数据表名称
     * @param array $params 数据
     */
    public  function  api_upd($db='',$params=[],$is_sql=false)
    {
        try {
            $params['update_time'] = time();
            $info = Db::name($db)->fetchSql($is_sql)->where('guid',$params['guid'])->update($params);
        } catch (\Exception $e) {
            base_msg($e->getMessage());
        }
        return $info;
    }

    /**
     * 删除数据
     * @author PENGKING
     * @since 2020-04-21
     * @param string $db 数据表名称
     * @param array $params 数据
     */
    public  function  api_del($db='',$params=[],$is_sql=false)
    {
        try {
            $info = Db::name($db)->fetchSql($is_sql)->where('guid',$params['guid'])->delete();
        } catch (\Exception $e) {
            base_msg($e->getMessage());
        }
        return $info;
    }

    /**
     * 自增/自减
     * @author PENGKING
     * @since 2020-04-21
     * @param string $db 数据表名称
     * @param string $type 类型 inc/dec
     * @param array $params 条件
     * @param string $field 字段
     * @param array $auto 值
     */
    public  function  api_inc_desc(string $db, string $type, array $params, string $field,$auto =1, $is_sql=false)
    {
        //try {
            if($type=="inc"){
                $info = Db::name($db)->fetchSql($is_sql)->where($params)->inc($field,$auto)->update();
            }elseif($type=="dec"){
                $info = Db::name($db)->fetchSql($is_sql)->where($params)->dec($field,$auto)->update();
            }else{
                base_msg("类型错误");
            }


//        } catch (\Exception $e) {
//            base_msg($e->getMessage());
//        }
        return $info;
    }


    /**
     * 数据格式核验
     * @author PENGKING
     * @since 2020-04-21
     * @param array $params 数据
     * @param array $rule 数据表名称
     * @param array $message 数据表名称
     */
    public  function  api_validate(array $params,array $rule,array $message)
    {
        //数据验证
        $validate = new Validate;
        $validate->rule($rule);
        $validate->message($message);
        if (!$validate->check($params)) {
            base_msg($validate->getError());
        }
    }














}