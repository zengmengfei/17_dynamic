


namespace app\admin\service;


use app\admin\model\<?php echo $moduleName?>;

/**
 * <?php echo $moduleTitle?>管理-服务类
 * @author <?php echo $author?>

 * @since: <?php echo $since?>

 * Class <?php echo $moduleName?>Service
 * @package app\admin\service
 */
class <?php echo $moduleName?>Service extends BaseService
{
    /**
     * 构造函数
     * LevelService constructor.
     */
    public function __construct()
    {
        $this->model = new <?php echo $moduleName?>();
    }
	
	/**
     * 获取数据列表
     * @return array
     * @since <?php echo $since?>

     * @author <?php echo $author?>

     */
    public function getList()
    {
        $param = request()->param();

        // 查询条件
        $map = [];
		
<?php foreach ($queryList as $val) {?>
	<?php if (isset($val['columnValue'])) {?>

	    // <?php echo $val['columnComment'];?>

        $<?php echo $val['columnName']?> = isset($param['<?php echo $val['columnName']?>']) ? (int)$param['<?php echo $val['columnName']?>'] : 0;
        if ($<?php echo $val['columnName']?>) {
            $map[] = ['<?php echo $val['columnName']?>', '=', $<?php echo $val['columnName']?>];
        }
	<?php } else {?>

	    // <?php echo $val['columnComment'];?>

        $<?php echo $val['columnName']?> = isset($param['<?php echo $val['columnName']?>']) ? trim($param['<?php echo $val['columnName']?>']) : '';
        if ($<?php echo $val['columnName']?>) {
            $map[] = ['<?php echo $val['columnName']?>', 'like', "%{$<?php echo $val['columnName']?>}%"];
        }
	<?php } ?>
<?php } ?>

        return parent::getList($map); // TODO: Change the autogenerated stub
    }

<?php if ($moduleImage) {?>
	/**
     * 添加或编辑
     * @return array
     * @since <?php echo $since?>

     * @author <?php echo $author?>

     */
    public function edit()
    {
        // 参数
        $data = request()->param();
	<?php foreach ($columnList as $val) { ?>
        <?php if (isset($val['columnImage']) && $val['columnImage']) {?>

		// <?php echo $val['columnComment']?>处理
        $<?php echo $val['columnName']?> = getter($data, '<?php echo $val['columnName']?>');
        if (!empty($<?php echo $val['columnName']?>)) {
            if (strpos($<?php echo $val['columnName']?>, "temp") !== false) {
                $data['<?php echo $val['columnName']?>'] = save_image($<?php echo $val['columnName']?>, '<?php echo strtolower($moduleName)?>');
            } else {
                $data['<?php echo $val['columnName']?>'] = str_replace(IMG_URL, "", $<?php echo $val['columnName']?>);
            }
        }
        <?php } ?>
    <?php } ?>

        return parent::edit($data); // TODO: Change the autogenerated stub
    }
<?php } ?>

<?php if ($columnList) {?>
<?php foreach ($columnList as $val) { ?>
    <?php if (isset($val['columnSwitch']) && $val['columnSwitch']) {?>
	<?php if ($val['columnName'] != "status") {?>

	/**
     * 设置<?php echo $val['columnComment']?>
     
	 * @return array
     * @throws \think\db\exception\BindParamException
     * @throws \think\exception\PDOException
     * @since <?php echo $since?>
     
	 * @author <?php echo $author?>
     
	 */
    public function <?php echo $val['columnSwitchName']?>()
    {
		// 参数
        $data = request()->param();
        $id = getter($data, "id", 0);
        if (!$id) {
            return message('记录ID不能为空', false);
        }
        $<?php echo $val['columnName']?> = getter($data, "<?php echo $val['columnName']?>", 0);
        if (!$<?php echo $val['columnName']?>) {
            return message('记录<?php echo $val['columnComment']?>不能为空', false);
        }
        $error = '';
        $item = [
            'id' => $id,
            '<?php echo $val['columnName']?>' => $<?php echo $val['columnName']?>
        ];
        $rowId = $this->model->edit($item, $error);
        if (!$rowId) {
            return message($error, false);
        }
        return message();
    }
    <?php } ?>
	<?php } ?>
<?php } ?>
<?php } ?>

        /**
        * 获取数据列表
        * @return array
        * @since <?php echo $since?>
        * @author <?php echo $author?>
        */
        public function getListSelect()
        {
            return parent::getListSelect();
        }

}